<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-4.3.xsd 
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-4.3.xsd 
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-4.3.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	<context:component-scan base-package="com.neuedu.pro3"></context:component-scan>
	
	<!-- 处理css js 静态资源的访问-->
	<mvc:default-servlet-handler/>

	<!-- 配置数据源 -->
	<!-- dpcb2 是一个第三方数据库连接池 -->
	<bean id="ds" class="org.apache.commons.dbcp2.BasicDataSource"
		destroy-method="close">
		<!-- 注意这里不一样 出错了 -->
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
		<property name="url" value="jdbc:oracle:thin:@localhost:1521:letitgo" />
		<property name="username" value="sun" />
		<property name="password" value="1031" />
	</bean>

	<!-- 配置session工厂 -->
	<bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 加载mybatis的主配置文件 -->
		<property name="configLocation" value="classpath:SqlMapConfig.xml" />
		<!-- 注入数据源 -->
		<property name="dataSource" ref="ds" />
	</bean>

	<!-- 配置service mapper的bean 由spring管理其生命周期 -->

	<!-- 扫描mapper -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 指定扫描的包名 如果扫描多个包，每个包中间使用半角逗号分隔 -->
		<property name="basePackage" value="com.neuedu.pro3.dao" />
		<!-- 自动创建session（connection）去数据库交互 注入session工厂 -->
		<property name="sqlSessionFactoryBeanName" value="sessionFactory" />
	</bean>

	<!-- 声明事务管理器 -->
		<!-- 切面类 -->
	<bean id="txm" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="ds"></property>
	</bean>

	<!-- 配置事务通知 -->
	<tx:advice id="txAdvice" transaction-manager="txm">
		<!-- 配置事务的传播特性 -->
		<!-- 配置事务传播特性 REQUIRED 支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。常用于DML语句的操作 SUPPORTS 
			支持当前事务，如果当前没有事务，就以非事务方式执行。 常用于DQL语句的操作 MANDATORY 支持当前事务，如果当前没有事务，就抛出异常。 REQUIRES_NEW 
			新建事务，如果当前存在事务，把当前事务挂起。 NOT_SUPPORTED 以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。 NEVER 
			以非事务方式执行，如果当前存在事务，则抛出异常。 NESTED 如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则进行与REQUIRED类似的操作。 -->
		<!-- 持久层，业务层的方法命名遵循规范 规定: 以save insert update delete为起始名的方法，执行事务 强制执行事务 
			以find select get validate为起始名的方法，不执行事务 不强制执行事务 规范大于规则：不准起其他的名字 -->
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="select*" propagation="SUPPORTS" read-only="true" />
		</tx:attributes>
	</tx:advice>
	<!-- 以上配置了切面 -->
	<!-- 通过aop切面来控制事务 -->
	<aop:config>
		<!-- pointcut 织入点语法  切入到哪里  * 不考虑返回值类型  ..不考虑入参-->
		<aop:advisor advice-ref="txAdvice" pointcut="execution(* com.neuedu.pro3.service.impl.*.*(..))" />
	</aop:config>

</beans>
